[
  {
    "objectID": "index.html",
    "href": "index.html",
    "title": "Data Science III with python (Class notes)",
    "section": "",
    "text": "Preface\nThese are class notes for the course STAT303-3. This is not the course text-book. You are required to read the relevant sections of the book as mentioned on the course website.\nThe course notes are currently being written, and will continue to being developed as the course progresses (just like the class notes last quarter). Please report any typos / mistakes / inconsistencies / issues with the class notes / class presentations in your comments here. Thank you!",
    "crumbs": [
      "Preface"
    ]
  },
  {
    "objectID": "L1_Scikit-learn.html",
    "href": "L1_Scikit-learn.html",
    "title": "1  Introduction to scikit-learn",
    "section": "",
    "text": "1.1 Splitting data into train and test\nLet us create train and test datasets for developing a model to predict if a person has diabetes.\n# Creating training and test data\n    # 80-20 split, which is usual - 70-30 split is also fine, 90-10 is fine if the dataset is large\n    # random_state to set a random seed for the splitting - reproducible results\nX_train, X_test, y_train, y_test = train_test_split(X, y, test_size = 0.2, random_state = 45)\nLet us find the proportion of classes (‘having diabetes’ (\\(y = 1\\)) or ‘not having diabetes’ (\\(y = 0\\))) in the complete dataset.\n#Proportion of 0s and 1s in the complete data\ny.value_counts()/y.shape\n\n0    0.651042\n1    0.348958\nName: Outcome, dtype: float64\nLet us find the proportion of classes (‘having diabetes’ (\\(y = 1\\)) or ‘not having diabetes’ (\\(y = 0\\))) in the train dataset.\n#Proportion of 0s and 1s in train data\ny_train.value_counts()/y_train.shape\n\n0    0.644951\n1    0.355049\nName: Outcome, dtype: float64\n#Proportion of 0s and 1s in test data\ny_test.value_counts()/y_test.shape\n\n0    0.675325\n1    0.324675\nName: Outcome, dtype: float64\nWe observe that the proportion of 0s and 1s in the train and test dataset are slightly different from that in the complete data. In order for these datasets to be more representative of the population, they should have a proportion of 0s and 1s similar to that in the complete dataset. This is especially critical in case of imbalanced datasets, where one class is represented by a significantly smaller number of instances than the other(s).\nWhen training a classification model on an imbalanced dataset, the model might not learn enough about the minority class, which can lead to poor generalization performance on new data. This happens because the model is biased towards the majority class, and it might even predict all instances as belonging to the majority class.",
    "crumbs": [
      "Sklearn; Bias & Variance; KNN",
      "<span class='chapter-number'>1</span>  <span class='chapter-title'>Introduction to scikit-learn</span>"
    ]
  },
  {
    "objectID": "L1_Scikit-learn.html#splitting-data-into-train-and-test",
    "href": "L1_Scikit-learn.html#splitting-data-into-train-and-test",
    "title": "1  Introduction to scikit-learn",
    "section": "",
    "text": "1.1.1 Stratified splitting\nWe will use the argument stratify to obtain a proportion of 0s and 1s in the train and test datasets that is similar to the proportion in the complete `data.\n\n#Stratified train-test split\nX_train_stratified, X_test_stratified, y_train_stratified,\\\ny_test_stratified = train_test_split(X, y, test_size = 0.2, random_state = 45, stratify=y)\n\n\n#Proportion of 0s and 1s in train data with stratified split\ny_train_stratified.value_counts()/y_train.shape\n\n0    0.651466\n1    0.348534\nName: Outcome, dtype: float64\n\n\n\n#Proportion of 0s and 1s in test data with stratified split\ny_test_stratified.value_counts()/y_test.shape\n\n0    0.649351\n1    0.350649\nName: Outcome, dtype: float64\n\n\nThe proportion of the classes in the stratified split mimics the proportion in the complete dataset more closely.\nBy using stratified splitting, we ensure that both the train and test data sets have the same proportion of instances from each class, which means that the model will see enough instances from the minority class during training. This, in turn, helps the model learn to distinguish between the classes better, leading to better performance on new data.\nThus, stratified splitting helps to ensure that the model sees enough instances from each class during training, which can improve the model’s ability to generalize to new data, particularly in cases where one class is underrepresented in the dataset.\nLet us develop a logistic regression model for predicting if a person has diabetes.",
    "crumbs": [
      "Sklearn; Bias & Variance; KNN",
      "<span class='chapter-number'>1</span>  <span class='chapter-title'>Introduction to scikit-learn</span>"
    ]
  },
  {
    "objectID": "L1_Scikit-learn.html#scaling-data",
    "href": "L1_Scikit-learn.html#scaling-data",
    "title": "1  Introduction to scikit-learn",
    "section": "1.2 Scaling data",
    "text": "1.2 Scaling data\nIn certain models, it may be important to scale data for various reasons. In a logistic regression model, scaling can help with model convergence. Scikit-learn uses a method known as gradient-descent (not in scope of the syllabus of this course) to obtain a solution. In case the predictors have different orders of magnitude, the algorithm may fail to converge. In such cases, it is useful to standardize the predictors so that all of them are at the same scale.\n\n# With linear/logistic regression in scikit-learn, especially when the predictors have different orders \n# of magn., scaling is necessary. This is to enable the training algo. which we did not cover. (Gradient Descent)\nscaler = StandardScaler().fit(X_train)\nX_train_scaled = scaler.transform(X_train)\nX_test_scaled = scaler.transform(X_test) # Do NOT refit the scaler with the test data, just transform it.",
    "crumbs": [
      "Sklearn; Bias & Variance; KNN",
      "<span class='chapter-number'>1</span>  <span class='chapter-title'>Introduction to scikit-learn</span>"
    ]
  },
  {
    "objectID": "L1_Scikit-learn.html#fitting-a-model",
    "href": "L1_Scikit-learn.html#fitting-a-model",
    "title": "1  Introduction to scikit-learn",
    "section": "1.3 Fitting a model",
    "text": "1.3 Fitting a model\nLet us fit a logistic regression model for predicting if a person has diabetes. Let us try fitting a model with the un-scaled data.\n\n# Create a model object - not trained yet\nlogreg = LogisticRegression()\n\n# Train the model\nlogreg.fit(X_train, y_train)\n\nC:\\Users\\akl0407\\AppData\\Roaming\\Python\\Python38\\site-packages\\sklearn\\linear_model\\_logistic.py:458: ConvergenceWarning: lbfgs failed to converge (status=1):\nSTOP: TOTAL NO. of ITERATIONS REACHED LIMIT.\n\nIncrease the number of iterations (max_iter) or scale the data as shown in:\n    https://scikit-learn.org/stable/modules/preprocessing.html\nPlease also refer to the documentation for alternative solver options:\n    https://scikit-learn.org/stable/modules/linear_model.html#logistic-regression\n  n_iter_i = _check_optimize_result(\n\n\nLogisticRegression()In a Jupyter environment, please rerun this cell to show the HTML representation or trust the notebook. On GitHub, the HTML representation is unable to render, please try loading this page with nbviewer.org.LogisticRegressionLogisticRegression()\n\n\nNote that the model with the un-scaled predictors fails to converge. Check out the data X_train to see that this may be probably due to the predictors have different orders of magnitude. For example, the predictor DiabetesPedigreeFunction has values in [0.078, 2.42], while the predictor Insulin has values in [0, 800].\nLet us fit the model to the scaled data.\n\n# Create a model - not trained yet\nlogreg = LogisticRegression()\n\n# Train the model\nlogreg.fit(X_train_scaled, y_train)\n\nLogisticRegression()In a Jupyter environment, please rerun this cell to show the HTML representation or trust the notebook. On GitHub, the HTML representation is unable to render, please try loading this page with nbviewer.org.LogisticRegressionLogisticRegression()\n\n\nThe model converges to a solution with the scaled data!\nThe coefficients of the model can be returned with the coef_ attribute of the LogisticRegression() object. However, the output is not as well formatted as in the case of the statsmodels library since sklearn is developed primarily for the purpose of prediction, and not inference.\n\n# Use coef_ to return the coefficients - only log reg inference you can do with sklearn\nprint(logreg.coef_) \n\n[[ 0.32572891  1.20110566 -0.32046591  0.06849882 -0.21727131  0.72619528\n   0.40088897  0.29698818]]",
    "crumbs": [
      "Sklearn; Bias & Variance; KNN",
      "<span class='chapter-number'>1</span>  <span class='chapter-title'>Introduction to scikit-learn</span>"
    ]
  },
  {
    "objectID": "L1_Scikit-learn.html#computing-performance-metrics",
    "href": "L1_Scikit-learn.html#computing-performance-metrics",
    "title": "1  Introduction to scikit-learn",
    "section": "1.4 Computing performance metrics",
    "text": "1.4 Computing performance metrics\n\n1.4.1 Accuracy\nLet us test the model prediction accuracy on the test data. We’ll demonstrate two different functions that can be used to compute model accuracy - accuracy_score(), and score().\nThe accuracy_score() function from the metrics module of the sklearn library is general, and can be used for any classification model. We’ll use it along with the predict() method of the LogisticRegression() object, which returns the predicted class based on a threshold probability of 0.5.\n\n# Get the predicted classes first\ny_pred = logreg.predict(X_test_scaled)\n\n# Use the predicted and true classes for accuracy\nprint(accuracy_score(y_pred, y_test)*100) \n\n73.37662337662337\n\n\nThe score() method of the LogisticRegression() object can be used to compute the accuracy only for a logistic regression model. Note that for a LinearRegression() object, the score() method will return the model \\(R\\)-squared.\n\n# Use .score with test predictors and response to get the accuracy\n# Implements the same thing under the hood\nprint(logreg.score(X_test_scaled, y_test)*100)  \n\n73.37662337662337\n\n\n\n\n1.4.2 ROC-AUC\nThe roc_curve() and auc() functions from the metrics module of the sklearn library can be used to compute the ROC-AUC, or the area under the ROC curve. Note that for computing ROC-AUC, we need the predicted probability, instead of the predicted class. Thus, we’ll use the predict_proba() method of the LogisticRegression() object, which returns the predicted probability for the observation to belong to each of the classes, instead of using the predict() method, which returns the predicted class based on threshold probability of 0.5.\n\n#Computing the predicted probability for the observation to belong to the positive class (y=1);\n#The 2nd column in the output of predict_proba() consists of the probability of the observation to \n#belong to the positive class (y=1)\ny_pred_prob = logreg.predict_proba(X_test_scaled)[:,1] \n\n#Using the predicted probability computed above to find ROC-AUC\nfpr, tpr, auc_thresholds = roc_curve(y_test, y_pred_prob)\nprint(auc(fpr, tpr))# AUC of ROC\n\n0.7923076923076922\n\n\n\n\n1.4.3 Confusion matrix & precision-recall\nThe confusion_matrix(), precision_score(), and recall_score() functions from the metrics module of the sklearn library can be used to compute the confusion matrix, precision, and recall respectively.\n\n#Confusion matrix\ncm = pd.DataFrame(confusion_matrix(y_test, y_pred), columns=['Predicted 0', 'Predicted 1'], \n            index = ['Actual 0', 'Actual 1'])\nsns.heatmap(cm, annot=True, cmap='Blues', fmt='g');\n\n\n\n\n\n\n\n\n\nprint(\"Precision: \", precision_score(y_test, y_pred))\nprint(\"Recall: \", recall_score(y_test, y_pred))\n\nPrecision:  0.6046511627906976\nRecall:  0.52\n\n\nLet us compute the performance metrics if we develop the model using stratified splitting.\n\n# Developing the model with stratified splitting\n\n#Scaling data\nscaler = StandardScaler().fit(X_train_stratified)\nX_train_stratified_scaled = scaler.transform(X_train_stratified)\nX_test_stratified_scaled = scaler.transform(X_test_stratified) \n\n# Training the model\nlogreg.fit(X_train_stratified_scaled, y_train_stratified)\n\n#Computing the accuracy\ny_pred_stratified = logreg.predict(X_test_stratified_scaled)\nprint(\"Accuracy: \",accuracy_score(y_pred_stratified, y_test_stratified)*100)  \n\n#Computing the ROC-AUC\ny_pred_stratified_prob = logreg.predict_proba(X_test_stratified_scaled)[:,1]\nfpr, tpr, auc_thresholds = roc_curve(y_test_stratified, y_pred_stratified_prob)\nprint(\"ROC-AUC: \",auc(fpr, tpr))# AUC of ROC\n\n#Computing the precision and recall\nprint(\"Precision: \", precision_score(y_test_stratified, y_pred_stratified))\nprint(\"Recall: \", recall_score(y_test_stratified, y_pred_stratified))\n\n#Confusion matrix\ncm = pd.DataFrame(confusion_matrix(y_test_stratified, y_pred_stratified), columns=['Predicted 0', 'Predicted 1'], \n            index = ['Actual 0', 'Actual 1'])\nsns.heatmap(cm, annot=True, cmap='Blues', fmt='g');\n\nAccuracy:  78.57142857142857\nROC-AUC:  0.8505555555555556\nPrecision:  0.7692307692307693\nRecall:  0.5555555555555556\n\n\n\n\n\n\n\n\n\nThe model with the stratified train-test split has a better performance as compared to the other model on all the performance metrics!",
    "crumbs": [
      "Sklearn; Bias & Variance; KNN",
      "<span class='chapter-number'>1</span>  <span class='chapter-title'>Introduction to scikit-learn</span>"
    ]
  },
  {
    "objectID": "L1_Scikit-learn.html#tuning-the-model-hyperparameters",
    "href": "L1_Scikit-learn.html#tuning-the-model-hyperparameters",
    "title": "1  Introduction to scikit-learn",
    "section": "1.5 Tuning the model hyperparameters",
    "text": "1.5 Tuning the model hyperparameters\nA hyperparameter (among others) that can be trained in a logistic regression model is the regularization parameter.\nWe may also wish to tune the decision threshold probability. Note that the decision threshold probability is not considered a hyperparameter of the model. Hyperparameters are model parameters that are set prior to training and cannot be directly adjusted by the model during training. Examples of hyperparameters in a logistic regression model include the regularization parameter, and the type of shrinkage penalty - lasso / ridge. These hyperparameters are typically optimized through a separate tuning process, such as cross-validation or grid search, before training the final model.\nThe performance metrics can be computed using a desired value of the threshold probability. Let us compute the performance metrics for a desired threshold probability of 0.3.\n\n# Performance metrics computation for a desired threshold probability of 0.3\ndesired_threshold = 0.3\n\n# Classifying observations in the positive class (y = 1) if the predicted probability is greater\n# than the desired decision threshold probability\ny_pred_desired_threshold = y_pred_stratified_prob &gt; desired_threshold\ny_pred_desired_threshold = y_pred_desired_threshold.astype(int)\n\n#Computing the accuracy\nprint(\"Accuracy: \",accuracy_score(y_pred_desired_threshold, y_test_stratified)*100)  \n\n#Computing the ROC-AUC\nfpr, tpr, auc_thresholds = roc_curve(y_test_stratified, y_pred_stratified_prob)\nprint(\"ROC-AUC: \",auc(fpr, tpr))# AUC of ROC\n\n#Computing the precision and recall\nprint(\"Precision: \", precision_score(y_test_stratified, y_pred_desired_threshold))\nprint(\"Recall: \", recall_score(y_test_stratified, y_pred_desired_threshold))\n\n#Confusion matrix\ncm = pd.DataFrame(confusion_matrix(y_test_stratified, y_pred_desired_threshold), \n                  columns=['Predicted 0', 'Predicted 1'], index = ['Actual 0', 'Actual 1'])\nsns.heatmap(cm, annot=True, cmap='Blues', fmt='g');\n\nAccuracy:  75.32467532467533\nROC-AUC:  0.8505555555555556\nPrecision:  0.6111111111111112\nRecall:  0.8148148148148148\n\n\n\n\n\n\n\n\n\n\n1.5.1 Tuning decision threshold probability\nSuppose we wish to find the optimal decision threshold probability to maximize accuracy. Note that we cannot use the test dataset to optimize model hyperparameters, as that may lead to overfitting on the test data. We’ll use \\(K\\)-fold cross validation on train data to find the optimal decision threshold probability.\nWe’ll use the cross_val_predict() function from the model_selection module of sklearn to compute the \\(K\\)-fold cross validated predicted probabilities. Note that this function simplifies the task of manually creating the \\(K\\)-folds, training the model \\(K\\)-times, and computing the predicted probabilities on each of the \\(K\\)-folds. Thereafter, the predicted probabilities will be used to find the optimal threshold probability that maximizes the classification accuracy.\n\nhyperparam_vals = np.arange(0,1.01,0.01)\naccuracy_iter = []\n\npredicted_probability = cross_val_predict(LogisticRegression(), X_train_stratified_scaled, \n                                              y_train_stratified, cv = 5, method = 'predict_proba')\n\nfor threshold_prob in hyperparam_vals:\n    predicted_class = predicted_probability[:,1] &gt; threshold_prob\n    predicted_class = predicted_class.astype(int)\n\n    #Computing the accuracy\n    accuracy = accuracy_score(predicted_class, y_train_stratified)*100\n    accuracy_iter.append(accuracy)\n\nLet us visualize the accuracy with change in decision threshold probability.\n\n# Accuracy vs decision threshold probability\nsns.scatterplot(x = hyperparam_vals, y = accuracy_iter)\nplt.xlabel('Decision threshold probability')\nplt.ylabel('Average 5-fold CV accuracy');\n\n\n\n\n\n\n\n\nThe optimal decision threshold probability is the one that maximizes the \\(K\\)-fold cross validation accuracy.\n\n# Optimal decision threshold probability\nhyperparam_vals[accuracy_iter.index(max(accuracy_iter))]\n\n0.46\n\n\n\n# Performance metrics computation for the optimum decision threshold probability\ndesired_threshold = 0.46\n\n# Classifying observations in the positive class (y = 1) if the predicted probability is greater\n# than the desired decision threshold probability\ny_pred_desired_threshold = y_pred_stratified_prob &gt; desired_threshold\ny_pred_desired_threshold = y_pred_desired_threshold.astype(int)\n\n#Computing the accuracy\nprint(\"Accuracy: \",accuracy_score(y_pred_desired_threshold, y_test_stratified)*100)  \n\n#Computing the ROC-AUC\nfpr, tpr, auc_thresholds = roc_curve(y_test_stratified, y_pred_stratified_prob)\nprint(\"ROC-AUC: \",auc(fpr, tpr))# AUC of ROC\n\n#Computing the precision and recall\nprint(\"Precision: \", precision_score(y_test_stratified, y_pred_desired_threshold))\nprint(\"Recall: \", recall_score(y_test_stratified, y_pred_desired_threshold))\n\n#Confusion matrix\ncm = pd.DataFrame(confusion_matrix(y_test_stratified, y_pred_desired_threshold), \n                  columns=['Predicted 0', 'Predicted 1'], index = ['Actual 0', 'Actual 1'])\nsns.heatmap(cm, annot=True, cmap='Blues', fmt='g');\n\nAccuracy:  79.87012987012987\nROC-AUC:  0.8505555555555556\nPrecision:  0.7804878048780488\nRecall:  0.5925925925925926\n\n\n\n\n\n\n\n\n\nModel performance on test data has improved with the optimal decision threshold probability.\n\n\n1.5.2 Tuning the regularization parameter\nThe LogisticRegression() method has a default L2 regularization penalty, which means ridge regression.C is \\(1/\\lambda\\), where \\(\\lambda\\) is the hyperparameter that is multiplied with the ridge penalty. C is 1 by default.\n\naccuracy_iter = []\nhyperparam_vals = 10**np.linspace(-3.5, 1)\n\nfor c_val in hyperparam_vals: # For each possible C value in your grid\n    logreg_model = LogisticRegression(C=c_val) # Create a model with the C value\n    \n    accuracy_iter.append(cross_val_score(logreg_model, X_train_stratified_scaled, y_train_stratified,\n                                      scoring='accuracy', cv=5)) # Find the cv results\n\n\nplt.plot(hyperparam_vals, np.mean(np.array(accuracy_iter), axis=1))\nplt.xlabel('C')\nplt.ylabel('Average 5-fold CV accuracy')\nplt.xscale('log')\nplt.show()\n\n\n\n\n\n\n\n\n\n# Optimal value of the regularization parameter 'C'\noptimal_C = hyperparam_vals[np.argmax(np.array(accuracy_iter).mean(axis=1))]\noptimal_C\n\n0.11787686347935879\n\n\n\n# Developing the model with stratified splitting and optimal 'C'\n\n#Scaling data\nscaler = StandardScaler().fit(X_train_stratified)\nX_train_stratified_scaled = scaler.transform(X_train_stratified)\nX_test_stratified_scaled = scaler.transform(X_test_stratified) \n\n# Training the model\nlogreg = LogisticRegression(C = optimal_C)\nlogreg.fit(X_train_stratified_scaled, y_train_stratified)\n\n#Computing the accuracy\ny_pred_stratified = logreg.predict(X_test_stratified_scaled)\nprint(\"Accuracy: \",accuracy_score(y_pred_stratified, y_test_stratified)*100)  \n\n#Computing the ROC-AUC\ny_pred_stratified_prob = logreg.predict_proba(X_test_stratified_scaled)[:,1]\nfpr, tpr, auc_thresholds = roc_curve(y_test_stratified, y_pred_stratified_prob)\nprint(\"ROC-AUC: \",auc(fpr, tpr))# AUC of ROC\n\n#Computing the precision and recall\nprint(\"Precision: \", precision_score(y_test_stratified, y_pred_stratified))\nprint(\"Recall: \", recall_score(y_test_stratified, y_pred_stratified))\n\n#Confusion matrix\ncm = pd.DataFrame(confusion_matrix(y_test_stratified, y_pred_stratified), columns=['Predicted 0', 'Predicted 1'], \n            index = ['Actual 0', 'Actual 1'])\nsns.heatmap(cm, annot=True, cmap='Blues', fmt='g');\n\nAccuracy:  78.57142857142857\nROC-AUC:  0.8516666666666666\nPrecision:  0.7837837837837838\nRecall:  0.5370370370370371\n\n\n\n\n\n\n\n\n\n\n\n1.5.3 Tuning the decision threshold probability and the regularization parameter simultaneously\n\nthreshold_hyperparam_vals = np.arange(0,1.01,0.01)\nC_hyperparam_vals = 10**np.linspace(-3.5, 1)\naccuracy_iter = pd.DataFrame({'threshold':[], 'C':[], 'accuracy':[]})\niter_number = 0\n\nfor c_val in C_hyperparam_vals:\n    predicted_probability = cross_val_predict(LogisticRegression(C = c_val), X_train_stratified_scaled, \n                                                  y_train_stratified, cv = 5, method = 'predict_proba')\n\n    for threshold_prob in threshold_hyperparam_vals:\n        predicted_class = predicted_probability[:,1] &gt; threshold_prob\n        predicted_class = predicted_class.astype(int)\n\n        #Computing the accuracy\n        accuracy = accuracy_score(predicted_class, y_train_stratified)*100\n        accuracy_iter.loc[iter_number, 'threshold'] = threshold_prob\n        accuracy_iter.loc[iter_number, 'C'] = c_val\n        accuracy_iter.loc[iter_number, 'accuracy'] = accuracy\n        iter_number = iter_number + 1\n\n\n# Parameters for highest accuracy\noptimal_C = accuracy_iter.sort_values(by = 'accuracy', ascending = False).iloc[0,:]['C']\noptimal_threshold = accuracy_iter.sort_values(by = 'accuracy', ascending = False).iloc[0, :]['threshold']\n\n#Optimal decision threshold probability\nprint(\"Optimal decision threshold = \", optimal_threshold)\n\n#Optimal C\nprint(\"Optimal C = \", optimal_C)\n\nOptimal decision threshold =  0.46\nOptimal C =  4.291934260128778\n\n\n\n# Developing the model with stratified splitting, optimal decision threshold probability, and optimal 'C'\n\n#Scaling data\nscaler = StandardScaler().fit(X_train_stratified)\nX_train_stratified_scaled = scaler.transform(X_train_stratified)\nX_test_stratified_scaled = scaler.transform(X_test_stratified) \n\n# Training the model\nlogreg = LogisticRegression(C = optimal_C)\nlogreg.fit(X_train_stratified_scaled, y_train_stratified)\n\n# Performance metrics computation for the optimal threshold probability\ny_pred_stratified_prob = logreg.predict_proba(X_test_stratified_scaled)[:,1]\n\n# Classifying observations in the positive class (y = 1) if the predicted probability is greater\n# than the desired decision threshold probability\ny_pred_desired_threshold = y_pred_stratified_prob &gt; optimal_threshold\ny_pred_desired_threshold = y_pred_desired_threshold.astype(int)\n\n#Computing the accuracy\nprint(\"Accuracy: \",accuracy_score(y_pred_desired_threshold, y_test_stratified)*100)  \n\n#Computing the ROC-AUC\nfpr, tpr, auc_thresholds = roc_curve(y_test_stratified, y_pred_stratified_prob)\nprint(\"ROC-AUC: \",auc(fpr, tpr))# AUC of ROC\n\n#Computing the precision and recall\nprint(\"Precision: \", precision_score(y_test_stratified, y_pred_desired_threshold))\nprint(\"Recall: \", recall_score(y_test_stratified, y_pred_desired_threshold))\n\n#Confusion matrix\ncm = pd.DataFrame(confusion_matrix(y_test_stratified, y_pred_desired_threshold), columns=['Predicted 0', 'Predicted 1'], \n            index = ['Actual 0', 'Actual 1'])\nsns.heatmap(cm, annot=True, cmap='Blues', fmt='g');\n\nAccuracy:  79.87012987012987\nROC-AUC:  0.8509259259259259\nPrecision:  0.7804878048780488\nRecall:  0.5925925925925926\n\n\n\n\n\n\n\n\n\nLater in the course, we’ll see the sklearn function GridSearchCV, which is used to optimize several model hyperparameters simultaneously with \\(K\\)-fold cross validation, while avoiding for loops.",
    "crumbs": [
      "Sklearn; Bias & Variance; KNN",
      "<span class='chapter-number'>1</span>  <span class='chapter-title'>Introduction to scikit-learn</span>"
    ]
  },
  {
    "objectID": "Bias_variance_code.html",
    "href": "Bias_variance_code.html",
    "title": "2  Bias-variance tradeoff",
    "section": "",
    "text": "2.1 Simple model (Less flexible)\nLet us consider a linear regression model as the less-flexible (or relatively simple) model.\nWe will first simulate the test dataset for which we will compute the bias and variance.\nnp.random.seed(101)\n\n# Simulating predictor values of test data\nxtest = np.random.uniform(-15, 10, 200)\n\n# Assuming the true mean response is square of the predictor value\nfxtest = xtest**2\n\n# Simulating test response by adding noise to the true mean response\nytest = fxtest + np.random.normal(0, 10, 200)\n\n# We will find bias and variance using a linear regression model for prediction\nmodel = LinearRegression()\n# Visualizing the data and the true mean response\nsns.scatterplot(x = xtest, y = ytest)\nsns.lineplot(x = xtest, y = fxtest, color = 'grey', linewidth = 2)\n\n# Initializing objects to store predictions and mean squared error\n# of 100 models developed on 100 distinct training datasets samples\npred_test = []; mse_test = []\n\n# Iterating over each of the 100 models\nfor i in range(100):\n    np.random.seed(i)\n    \n    # Simulating the ith training data\n    x = np.random.uniform(-15, 10, 200)\n    fx = x**2\n    y = fx + np.random.normal(0, 10, 200)\n    \n    # Fitting the ith model on the ith training data\n    model.fit(x.reshape(-1,1), y)\n    \n    # Plotting the ith model\n    sns.lineplot(x = x, y = model.predict(x.reshape(-1,1)))\n    \n    # Storing the predictions of the ith model on test data\n    pred_test.append(model.predict(xtest.reshape(-1,1)))\n    \n    # Storing the mean squared error of the ith model on test data\n    mse_test.append(mean_squared_error(model.predict(xtest.reshape(-1,1)), ytest))\nThe above plots show that the 100 models seem to have low variance, but high bias. Note that the bias is low only around a couple of points (x = -10 & x = 5).\nLet us compute the average squared bias over all the test data points.\nmean_pred = np.array(pred_test).mean(axis = 0)\nsq_bias = ((mean_pred - fxtest)**2).mean()\nsq_bias\n\n2042.104126728109\nLet us compute the average variance over all the test data points.\nmean_var = np.array(pred_test).var(axis = 0).mean()\nmean_var\n\n28.37397844429763\nLet us compute the mean squared error over all the test data points.\nnp.array(mse_test).mean()\n\n2201.957555529835\nNote that the mean squared error should be the same as the sum of squared bias, variance, and irreducible error.\nThe sum of squared bias, model variance, and irreducible error is:\nsq_bias + mean_var + 100\n\n2170.4781051724067\nNote that this is approximately, but not exactly, the same as the mean squared error computed above as we are developing a finite number of models, and making predictions on a finite number of test data points.",
    "crumbs": [
      "Sklearn; Bias & Variance; KNN",
      "<span class='chapter-number'>2</span>  <span class='chapter-title'>Bias-variance tradeoff</span>"
    ]
  },
  {
    "objectID": "Bias_variance_code.html#complex-model-more-flexible",
    "href": "Bias_variance_code.html#complex-model-more-flexible",
    "title": "2  Bias-variance tradeoff",
    "section": "2.2 Complex model (more flexible)",
    "text": "2.2 Complex model (more flexible)\nLet us consider a decion tree as the more flexible model.\n\nnp.random.seed(101)\nxtest = np.random.uniform(-15, 10, 200)\nfxtest = xtest**2\nytest = fxtest + np.random.normal(0, 10, 200)\nmodel = DecisionTreeRegressor()\n\n\nsns.scatterplot(x = xtest, y = ytest)\nsns.lineplot(x = xtest, y = fxtest, color = 'grey', linewidth = 2)\npred_test = []; mse_test = []\nfor i in range(100):\n    np.random.seed(i)\n    x = np.random.uniform(-15, 10, 200)\n    fx = x**2\n    y = fx + np.random.normal(0, 10, 200)\n    model.fit(x.reshape(-1,1), y)\n    sns.lineplot(x = x, y = model.predict(x.reshape(-1,1)))\n    pred_test.append(model.predict(xtest.reshape(-1,1)))\n    mse_test.append(mean_squared_error(model.predict(xtest.reshape(-1,1)), ytest))\n\n\n\n\n\n\n\n\nThe above plots show that the 100 models seem to have high variance, but low bias.\nLet us compute the average squared bias over all the test data points.\n\nmean_pred = np.array(pred_test).mean(axis = 0)\nsq_bias = ((mean_pred - fxtest)**2).mean()\nsq_bias\n\n1.3117561629333938\n\n\nLet us compute the average model variance over all the test data points.\n\nmean_var = np.array(pred_test).var(axis = 0).mean()\nmean_var\n\n102.5226748977198\n\n\nLet us compute the average mean squared error over all the test data points.\n\nnp.array(mse_test).mean()\n\n225.92027460924726\n\n\nNote that the above error is approximately the same as the sum of the squared bias, model variance and the irreducible error.\nNote that the relatively more flexible model has a higher variance, but lower bias as compared to the less flexible linear model. This will typically be the case, but may not be true in all scenarios. We will discuss one such scenario later.",
    "crumbs": [
      "Sklearn; Bias & Variance; KNN",
      "<span class='chapter-number'>2</span>  <span class='chapter-title'>Bias-variance tradeoff</span>"
    ]
  },
  {
    "objectID": "KNN.html",
    "href": "KNN.html",
    "title": "3  KNN",
    "section": "",
    "text": "3.1 KNN for regression\n#Using the same datasets as used for linear regression in STAT303-2, \n#so that we can compare the non-linear models with linear regression\ntrainf = pd.read_csv('./Datasets/Car_features_train.csv')\ntrainp = pd.read_csv('./Datasets/Car_prices_train.csv')\ntestf = pd.read_csv('./Datasets/Car_features_test.csv')\ntestp = pd.read_csv('./Datasets/Car_prices_test.csv')\ntrain = pd.merge(trainf,trainp)\ntest = pd.merge(testf,testp)\ntrain.head()\n\n\n\n\n\n\n\n\n\ncarID\nbrand\nmodel\nyear\ntransmission\nmileage\nfuelType\ntax\nmpg\nengineSize\nprice\n\n\n\n\n0\n18473\nbmw\n6 Series\n2020\nSemi-Auto\n11\nDiesel\n145\n53.3282\n3.0\n37980\n\n\n1\n15064\nbmw\n6 Series\n2019\nSemi-Auto\n10813\nDiesel\n145\n53.0430\n3.0\n33980\n\n\n2\n18268\nbmw\n6 Series\n2020\nSemi-Auto\n6\nDiesel\n145\n53.4379\n3.0\n36850\n\n\n3\n18480\nbmw\n6 Series\n2017\nSemi-Auto\n18895\nDiesel\n145\n51.5140\n3.0\n25998\n\n\n4\n18492\nbmw\n6 Series\n2015\nAutomatic\n62953\nDiesel\n160\n51.4903\n3.0\n18990\npredictors = ['mpg', 'engineSize', 'year', 'mileage']\n\nX_train = train[predictors]\ny_train = train['price']\n\nX_test = test[predictors]\ny_test = test['price']\nLet us scale data as we are using KNN.",
    "crumbs": [
      "Sklearn; Bias & Variance; KNN",
      "<span class='chapter-number'>3</span>  <span class='chapter-title'>KNN</span>"
    ]
  },
  {
    "objectID": "KNN.html#knn-for-regression",
    "href": "KNN.html#knn-for-regression",
    "title": "3  KNN",
    "section": "",
    "text": "3.1.1 Scaling data\n\n# Scale\nsc = StandardScaler()\n\nsc.fit(X_train)\nX_train_scaled = sc.transform(X_train)\nX_test_scaled = sc.transform(X_test)\n\nLet fit the model and compute the RMSE on test data. If the number of neighbors is not specified, the default value is taken.\n\n\n3.1.2 Fitting and validating model\n\nknn_model = KNeighborsRegressor() \n\nknn_model.fit(X_train_scaled, (y_train))\n\ny_pred = knn_model.predict(X_test_scaled)\ny_pred_train = knn_model.predict(X_train_scaled)\n\nmean_squared_error(y_test, (y_pred), squared=False)\n\n6329.691192885354\n\n\n\nknn_model2 = KNeighborsRegressor(n_neighbors = 5, weights='distance') # Default weights is uniform\n\nknn_model2.fit(X_train_scaled, y_train)\n\ny_pred = knn_model2.predict(X_test_scaled)\n\nmean_squared_error(y_test, y_pred, squared=False)\n\n6063.327598353961\n\n\nThe model seems to fit better than all the linear models in STAT303-2.\n\n\n3.1.3 Hyperparameter tuning\nWe will use cross-validation to find the optimal value of the hyperparameter n_neighbors.\n\nKs = np.arange(1,601)\n\ncv_scores = []\n\nfor K in Ks:\n    model = KNeighborsRegressor(n_neighbors = K, weights='distance')\n    score = cross_val_score(model, X_train_scaled, y_train, cv=5, scoring = 'neg_root_mean_squared_error')\n    cv_scores.append(score)\n\n\nnp.array(cv_scores).shape\n# Each row is a K\n\n(600, 5)\n\n\n\ncv_scores_array = np.array(cv_scores)\n\navg_cv_scores = -cv_scores_array.mean(axis=1)\n\n\nsns.lineplot(x = range(600), y = avg_cv_scores);\nplt.xlabel('K')\nplt.ylabel('5-fold Cross-validated RMSE');\n\n\n\n\n\n\n\n\n\navg_cv_scores.min() # Best CV score\n \nKs[avg_cv_scores.argmin()] # Best hyperparam value\n\n366\n\n\nThe optimal hyperparameter value is 366. Does it seem to be too high?\n\nbest_model = KNeighborsRegressor(n_neighbors = Ks[avg_cv_scores.argmin()], weights='distance')\n\nbest_model.fit(X_train_scaled, y_train)\n\ny_pred = best_model.predict(X_test_scaled)\n\nmean_squared_error(y_test, y_pred, squared=False)\n\n7724.452068618346\n\n\nThe test error with the optimal hyperparameter value based on cross-validation is much higher than that based on the default value of the hyperparameter. Why is that?\n\n\n3.1.4 KNN hyperparameters\nThe model hyperparameters can be obtained using the get_params() method. Note that there are other hyperparameters to tune in addition to number of neighbors. However, the number of neighbours may be the most influential hyperparameter in most cases.\n\nbest_model.get_params()\n\n{'algorithm': 'auto',\n 'leaf_size': 30,\n 'metric': 'minkowski',\n 'metric_params': None,\n 'n_jobs': None,\n 'n_neighbors': 366,\n 'p': 2,\n 'weights': 'distance'}\n\n\nThe distances and the indices of the nearest K observations to each test observation can be obtained using the kneighbors() method.\n\nbest_model.kneighbors(X_test_scaled, return_distance=True)\n\n# Each row is a test obs\n# The cols are the indices of the K Nearest Neighbors (in the training data) to the test obs\n\n(array([[1.92799060e-02, 1.31899013e-01, 1.89662146e-01, ...,\n         8.38960707e-01, 8.39293053e-01, 8.39947823e-01],\n        [7.07215830e-02, 1.99916181e-01, 2.85592939e-01, ...,\n         1.15445056e+00, 1.15450848e+00, 1.15512897e+00],\n        [1.32608205e-03, 1.43558347e-02, 1.80622215e-02, ...,\n         5.16758453e-01, 5.17378567e-01, 5.17852312e-01],\n        ...,\n        [1.29209535e-02, 1.59187173e-02, 3.67038947e-02, ...,\n         8.48811744e-01, 8.51235616e-01, 8.55044146e-01],\n        [1.84971803e-02, 1.67471541e-01, 1.69374312e-01, ...,\n         7.76743422e-01, 7.76943691e-01, 7.77760930e-01],\n        [4.63762129e-01, 5.88639393e-01, 7.54718535e-01, ...,\n         3.16994824e+00, 3.17126663e+00, 3.17294300e+00]]),\n array([[1639, 1647, 4119, ..., 3175, 2818, 4638],\n        [ 367, 1655, 1638, ..., 2010, 3600,  268],\n        [ 393, 4679, 3176, ..., 4663,  357,  293],\n        ...,\n        [3116, 3736, 3108, ..., 3841, 2668, 2666],\n        [4864, 3540, 4852, ..., 3596, 3605, 4271],\n        [ 435,  729, 4897, ..., 4112, 2401, 2460]], dtype=int64))",
    "crumbs": [
      "Sklearn; Bias & Variance; KNN",
      "<span class='chapter-number'>3</span>  <span class='chapter-title'>KNN</span>"
    ]
  },
  {
    "objectID": "KNN.html#knn-for-classification",
    "href": "KNN.html#knn-for-classification",
    "title": "3  KNN",
    "section": "3.2 KNN for classification",
    "text": "3.2 KNN for classification\nKNN model for classification can developed and tuned in a similar manner using the sklearn function KNeighborsClassifier()\n\nFor classification, KNeighborsClassifier\nExact same inputs\n\nOne detail: Not common to use even numbers for K in classification because of majority voting\nKs = np.arange(1,41,2) –&gt; To get the odd numbers",
    "crumbs": [
      "Sklearn; Bias & Variance; KNN",
      "<span class='chapter-number'>3</span>  <span class='chapter-title'>KNN</span>"
    ]
  },
  {
    "objectID": "Lec3_RegressionTrees.html",
    "href": "Lec3_RegressionTrees.html",
    "title": "4  Regression trees",
    "section": "",
    "text": "4.1 Building a regression tree\nDevelop a regression tree to predict car price based on mileage\nX = train['mileage']\ny = train['price']\n#Defining the object to build a regression tree\nmodel = DecisionTreeRegressor(random_state=1, max_depth=3) \n\n#Fitting the regression tree to the data\nmodel.fit(X.values.reshape(-1,1), y)\n\nDecisionTreeRegressor(max_depth=3, random_state=1)\n#Visualizing the regression tree\ndot_data = StringIO()\nexport_graphviz(model, out_file=dot_data,  \n                filled=True, rounded=True,\n                feature_names =['mileage'],precision=0)\ngraph = pydotplus.graph_from_dot_data(dot_data.getvalue())  \ngraph.write_png('car_price_tree.png')\nImage(graph.create_png())\n#prediction on test data\npred=model.predict(test[['mileage']])\n#RMSE on test data\nnp.sqrt(mean_squared_error(test.price, pred))\n\n13764.798425410803\n#Visualizing the model fit\nXtest = np.linspace(min(X), max(X), 100)\npred_test = model.predict(Xtest.reshape(-1,1))\nsns.scatterplot(x = 'mileage', y = 'price', data = train, color = 'orange')\nsns.lineplot(x = Xtest, y = pred_test, color = 'blue')\nAll cars falling within the same terminal node have the same predicted price, which is seen as flat line segments in the above model curve.\nDevelop a regression tree to predict car price based on mileage, mpg, engineSize and year\nX = train[['mileage','mpg','year','engineSize']]\nmodel = DecisionTreeRegressor(random_state=1, max_depth=3) \nmodel.fit(X, y)\ndot_data = StringIO()\nexport_graphviz(model, out_file=dot_data,  \n                filled=True, rounded=True,\n                feature_names =['mileage','mpg','year','engineSize'],precision=0)\ngraph = pydotplus.graph_from_dot_data(dot_data.getvalue())  \ngraph.write_png('car_price_tree.png')\nImage(graph.create_png())",
    "crumbs": [
      "Tree based models",
      "<span class='chapter-number'>4</span>  <span class='chapter-title'>Regression trees</span>"
    ]
  },
  {
    "objectID": "Lec3_RegressionTrees.html#optimizing-parameters-to-improve-the-regression-tree",
    "href": "Lec3_RegressionTrees.html#optimizing-parameters-to-improve-the-regression-tree",
    "title": "4  Regression trees",
    "section": "4.2 Optimizing parameters to improve the regression tree",
    "text": "4.2 Optimizing parameters to improve the regression tree\nLet us find the optimal depth of the tree and the number of terminal nodes (leaves) by cross validation.\n\n4.2.1 Range of hyperparameter values\nFirst, we’ll find the minimum and maximum possible values of the depth and leaves, and then find the optimal value in that range.\n\nmodel = DecisionTreeRegressor(random_state=1) \nmodel.fit(X, y)\n\nprint(\"Maximum tree depth =\", model.get_depth())\n\nprint(\"Maximum leaves =\", model.get_n_leaves())\n\nMaximum tree depth = 29\nMaximum leaves = 4845\n\n\n\n\n4.2.2 Cross validation: Coarse grid\nWe’ll use the sklearn function GridSearchCV to find the optimal hyperparameter values over a grid of possible values. By default, GridSearchCV returns the optimal hyperparameter values based on the coefficient of determination \\(R^2\\). However, the scoring argument of the function can be used to find the optimal parameters based on several different criteria as mentioned in the scoring-parameter documentation.\n\n#Finding cross-validation error for trees \nparameters = {'max_depth':range(2,30, 3),'max_leaf_nodes':range(2,4900, 100)}\ncv = KFold(n_splits = 5,shuffle=True,random_state=1)\nmodel = GridSearchCV(DecisionTreeRegressor(random_state=1), parameters, n_jobs=-1,verbose=1,cv=cv)\nmodel.fit(X, y)\nprint (model.best_score_, model.best_params_) \n\nFitting 5 folds for each of 490 candidates, totalling 2450 fits\n0.8433100904754441 {'max_depth': 11, 'max_leaf_nodes': 302}\n\n\nLet us find the optimal hyperparameters based on the mean squared error, instead of \\(R^2\\). Let us compute \\(R^2\\) as well during cross validation, as we can compute multiple performance metrics using the scoring argument. However, when computing multiple performance metrics, we will need to specify the performance metric used to find the optimal hyperparameters with the refit argument.\n\n#Finding cross-validation error for trees \nparameters = {'max_depth':range(2,30, 3),'max_leaf_nodes':range(2,4900, 100)}\ncv = KFold(n_splits = 5,shuffle=True,random_state=1)\nmodel = GridSearchCV(DecisionTreeRegressor(random_state=1), parameters, n_jobs=-1,verbose=1,cv=cv,\n                    scoring=['neg_mean_squared_error', 'r2'], refit = 'neg_mean_squared_error')\nmodel.fit(X, y)\nprint (model.best_score_, model.best_params_) \n\nFitting 5 folds for each of 490 candidates, totalling 2450 fits\n-42064467.15261547 {'max_depth': 11, 'max_leaf_nodes': 302}\n\n\nNote that as the GridSearchCV function maximizes the performance metric to find the optimal hyperparameters, we are maximizing the negative mean squared error (neg_mean_squared_error), and the function returns the optimal negative mean squared error.\nLet us visualize the mean squared error based on the hyperparameter values. We’ll use the cross validation results stored in the cv_results_ attribute of the GridSearchCV fit() object.\n\n#Detailed results of k-fold cross validation\ncv_results = pd.DataFrame(model.cv_results_)\ncv_results.head()\n\n\nfig, axes = plt.subplots(1,2,figsize=(14,5))\nplt.subplots_adjust(wspace=0.2)\naxes[0].plot(cv_results.param_max_depth, np.sqrt(-cv_results.mean_test_neg_mean_squared_error), 'o')\naxes[0].set_ylim([6200, 7500])\naxes[0].set_xlabel('Depth')\naxes[0].set_ylabel('K-fold RMSE')\naxes[1].plot(cv_results.param_max_leaf_nodes, np.sqrt(-cv_results.mean_test_neg_mean_squared_error), 'o')\naxes[1].set_ylim([6200, 7500])\naxes[1].set_xlabel('Leaves')\naxes[1].set_ylabel('K-fold RMSE');\n\n\n\n\n\n\n\n\nWe observe that for a depth of around 8-14, and number of leaves within 1000, we get the lowest \\(K\\)-fold RMSE. So, we should do a finer search in that region to obtain more precise hyperparameter values.\n\n\n4.2.3 Cross validation: Finer grid\n\n#Finding cross-validation error for trees\nstart_time = tm.time()\nparameters = {'max_depth':range(8,15),'max_leaf_nodes':range(2,1000)}\ncv = KFold(n_splits = 5,shuffle=True,random_state=1)\nmodel = GridSearchCV(DecisionTreeRegressor(random_state=1), parameters, n_jobs=-1,verbose=1,cv=cv)\nmodel.fit(X, y)\nprint (model.best_score_, model.best_params_) \nprint(\"Time taken =\", round((tm.time() - start_time)/60), \"minutes\")\n\nFitting 5 folds for each of 6986 candidates, totalling 34930 fits\n0.8465176078797111 {'max_depth': 10, 'max_leaf_nodes': 262}\nTime taken = 1 minutes\n\n\nFrom the above cross-validation, the optimal hyperparameter values are max_depth = 10 and max_leaf_nodes = 262.\n\n#Developing the tree based on optimal hyperparameters found by cross-validation\nmodel = DecisionTreeRegressor(random_state=1, max_depth=10,max_leaf_nodes=262) \nmodel.fit(X, y)\n\nDecisionTreeRegressor(max_depth=10, max_leaf_nodes=262, random_state=1)\n\n\n\n#RMSE on test data\nXtest = test[['mileage','mpg','year','engineSize']]\nnp.sqrt(mean_squared_error(test.price, model.predict(Xtest)))\n\n6921.0404660552895\n\n\nThe RMSE for the decision tree is lower than that of linear regression models and spline regression models (including MARS), with these four predictors. This may be probably due to car price having a highly non-linear association with the predictors.\nPredictor importance: The importance of a predictor is computed as the (normalized) total reduction of the criterion (SSE in case of regression trees) brought by that predictor.\nWarning: impurity-based feature importances can be misleading for high cardinality features (many unique values) Source: https://scikit-learn.org/stable/modules/generated/sklearn.tree.DecisionTreeRegressor.html#sklearn.tree.DecisionTreeRegressor.feature_importances_\nWhy?\nBecause high cardinality predictors will tend to overfit. When the predictors have high cardinality, it means they form little groups (in the leaf nodes) and then the model “learns” the individuals, instead of “learning” the general trend. The higher the cardinality of the predictor, the more prone is the model to overfitting.\n\nmodel.feature_importances_\n\narray([0.04490344, 0.15882336, 0.29739951, 0.49887369])\n\n\nEngine size is the most important predictor, followed by year, which is followed by mpg, and mileage is the least important predictor.",
    "crumbs": [
      "Tree based models",
      "<span class='chapter-number'>4</span>  <span class='chapter-title'>Regression trees</span>"
    ]
  },
  {
    "objectID": "Lec3_RegressionTrees.html#cost-complexity-pruning",
    "href": "Lec3_RegressionTrees.html#cost-complexity-pruning",
    "title": "4  Regression trees",
    "section": "4.3 Cost complexity pruning",
    "text": "4.3 Cost complexity pruning\nWhile optimizing parameters above, we optimized them within a range that we thought was reasonable. While doing so, we restricted ourselves to considering only a subset of the unpruned tree. Thus, we could have missed out on finding the optimal tree (or the best model).\nWith cost complexity pruning, we first develop an unpruned tree without any restrictions. Then, using cross validation, we find the optimal value of the tuning parameter \\(\\alpha\\). All the non-terminal nodes for which \\(\\alpha_{eff}\\) is smaller that the optimal \\(\\alpha\\) will be pruned. You will need to check out the link below to understand this better.\nCheck out a detailed explanation of how cost complexity pruning is implemented in sklearn at: https://scikit-learn.org/stable/modules/tree.html#minimal-cost-complexity-pruning\nHere are some informative visualizations that will help you understand what is happening in cost complexity pruning: https://scikit-learn.org/stable/auto_examples/tree/plot_cost_complexity_pruning.html#sphx-glr-auto-examples-tree-plot-cost-complexity-pruning-py\n\nmodel = DecisionTreeRegressor(random_state = 1)#model without any restrictions\npath= model.cost_complexity_pruning_path(X,y)# Compute the pruning path during Minimal Cost-Complexity Pruning.\n\n\nalphas=path['ccp_alphas']\n\n\nlen(alphas)\n\n4126\n\n\n\nstart_time = tm.time()\ncv = KFold(n_splits = 5,shuffle=True,random_state=1)\ntree = GridSearchCV(DecisionTreeRegressor(random_state=1), param_grid = {'ccp_alpha':alphas}, \n                     scoring = 'neg_mean_squared_error',n_jobs=-1,verbose=1,cv=cv)\ntree.fit(X, y)\nprint (tree.best_score_, tree.best_params_)\nprint(\"Time taken =\",round((tm.time()-start_time)/60), \"minutes\")\n\nFitting 5 folds for each of 4126 candidates, totalling 20630 fits\n-44150619.209031895 {'ccp_alpha': 143722.94076639024}\nTime taken = 2 minutes\n\n\nThe code took 2 minutes to run on a dataset of about 5000 observations and 4 predictors.\n\nmodel = DecisionTreeRegressor(ccp_alpha=143722.94076639024,random_state=1)\nmodel.fit(X, y)\npred = model.predict(Xtest)\nnp.sqrt(mean_squared_error(test.price, pred))\n\n7306.592294294368\n\n\nThe RMSE for the decision tree with cost complexity pruning is lower than that of linear regression models and spline regression models (including MARS), with these four predictors. However, it is higher than the one obtained with tuning tree parameters using grid search (shown previously). Cost complexity pruning considers a completely unpruned tree unlike the ‘grid search’ method of searching over a grid of hyperparameters such as max_depth and max_leaf_nodes, and thus may seem to be more comprehensive than the ‘grid search’ approach. However, both the approaches may consider trees that are not considered by the other approach, and thus either one may provide a more accurate model. Depending on the grid of parameters chosen for cross validation, the grid search method may be more or less comprehensive than cost complexity pruning.\n\ngridcv_results = pd.DataFrame(tree.cv_results_)\ncv_error = -gridcv_results['mean_test_score']\n\n\n#Visualizing the 5-fold cross validation error vs alpha\nplt.plot(alphas,cv_error)\nplt.xscale('log')\nplt.xlabel('alpha')\nplt.ylabel('K-fold MSE');\n\n\n\n\n\n\n\n\n\n#Zooming in the above visualization to see the alpha where the 5-fold cross validation error is minimizing\nplt.plot(alphas[0:4093],cv_error[0:4093])\nplt.xlabel('alpha')\nplt.ylabel('K-fold MSE');\n\n\n\n\n\n\n\n\n\n4.3.1 Depth vs alpha; Node counts vs alpha\n\nstime = time.time()\ntrees=[]\nfor i in alphas:\n    tree = DecisionTreeRegressor(ccp_alpha=i,random_state=1)\n    tree.fit(X, train['price'])\n    trees.append(tree)\nprint(time.time()-stime)\n\n268.10325384140015\n\n\nThis code takes 4.5 minutes to run\n\nnode_counts = [clf.tree_.node_count for clf in trees]\ndepth = [clf.tree_.max_depth for clf in trees]\n\n\nfig, ax = plt.subplots(1, 2,figsize=(10,6))\nax[0].plot(alphas[0:4093], node_counts[0:4093], marker=\"o\", drawstyle=\"steps-post\")#Plotting the zoomed-in plot (ignoring very high alphas), otherwise it is hard to see the trend\nax[0].set_xlabel(\"alpha\")\nax[0].set_ylabel(\"number of nodes\")\nax[0].set_title(\"Number of nodes vs alpha\")\nax[1].plot(alphas[0:4093], depth[0:4093], marker=\"o\", drawstyle=\"steps-post\")#Plotting the zoomed-in plot (ignoring very high alphas), otherwise it is hard to see the trend\nax[1].set_xlabel(\"alpha\")\nax[1].set_ylabel(\"depth of tree\")\nax[1].set_title(\"Depth vs alpha\")\n#fig.tight_layout()\n\nText(0.5, 1.0, 'Depth vs alpha')\n\n\n\n\n\n\n\n\n\n\n\n4.3.2 Train and test accuracies (R-squared) vs alpha\n\ntrain_scores = [clf.score(X, y) for clf in trees]\ntest_scores = [clf.score(Xtest, test.price) for clf in trees]\n\n\nfig, ax = plt.subplots()\nax.set_xlabel(\"alpha\")\nax.set_ylabel(\"accuracy\")\nax.set_title(\"Accuracy vs alpha for training and testing sets\")\nax.plot(alphas[0:4093], train_scores[0:4093], marker=\"o\", label=\"train\", drawstyle=\"steps-post\")#Plotting the zoomed-in plot (ignoring very high alphas), otherwise it is hard to see the trend\nax.plot(alphas[0:4093], test_scores[0:4093], marker=\"o\", label=\"test\", drawstyle=\"steps-post\")#Plotting the zoomed-in plot (ignoring very high alphas), otherwise it is hard to see the trend\nax.legend()\nplt.show()",
    "crumbs": [
      "Tree based models",
      "<span class='chapter-number'>4</span>  <span class='chapter-title'>Regression trees</span>"
    ]
  },
  {
    "objectID": "Lec4_ClassificationTree.html",
    "href": "Lec4_ClassificationTree.html",
    "title": "5  Classification trees",
    "section": "",
    "text": "5.1 Building a classification tree\nDevelop a classification tree to predict if a person has diabetes.\nX = train.drop(columns = 'Outcome')\nXtest = test.drop(columns = 'Outcome')\ny = train['Outcome']\nytest = test['Outcome']\n#Defining the object to build a classification tree\nmodel = DecisionTreeClassifier(random_state=1, max_depth=3) \n\n#Fitting the regression tree to the data\nmodel.fit(X, y)\n\nDecisionTreeClassifier(max_depth=3, random_state=1)\n#Visualizing the regression tree\ndot_data = StringIO()\nexport_graphviz(model, out_file=dot_data,  \n                filled=True, rounded=True,\n                feature_names =X.columns,precision=2)\ngraph = pydotplus.graph_from_dot_data(dot_data.getvalue())  \n#graph.write_png('car_price_tree.png')\nImage(graph.create_png())\n# Performance metrics computation \n\n#Computing the accuracy\ny_pred = model.predict(Xtest)\nprint(\"Accuracy: \",accuracy_score(y_pred, ytest)*100)  \n\n#Computing the ROC-AUC\ny_pred_prob = model.predict_proba(Xtest)[:,1]\nfpr, tpr, auc_thresholds = roc_curve(ytest, y_pred_prob)\nprint(\"ROC-AUC: \",auc(fpr, tpr))# AUC of ROC\n\n#Computing the precision and recall\nprint(\"Precision: \", precision_score(ytest, y_pred))\nprint(\"Recall: \", recall_score(ytest, y_pred))\n\n#Confusion matrix\ncm = pd.DataFrame(confusion_matrix(ytest, y_pred), columns=['Predicted 0', 'Predicted 1'], \n            index = ['Actual 0', 'Actual 1'])\nsns.heatmap(cm, annot=True, cmap='Blues', fmt='g');\n\nAccuracy:  73.37662337662337\nROC-AUC:  0.8349197955226512\nPrecision:  0.7777777777777778\nRecall:  0.45901639344262296",
    "crumbs": [
      "Tree based models",
      "<span class='chapter-number'>5</span>  <span class='chapter-title'>Classification trees</span>"
    ]
  },
  {
    "objectID": "Lec4_ClassificationTree.html#optimizing-hyperparameters-to-optimize-performance",
    "href": "Lec4_ClassificationTree.html#optimizing-hyperparameters-to-optimize-performance",
    "title": "5  Classification trees",
    "section": "5.2 Optimizing hyperparameters to optimize performance",
    "text": "5.2 Optimizing hyperparameters to optimize performance\nIn case of diabetes, it is important to reduce FNR (False negative rate) or maximize recall. This is because if a person has diabetes, the consequences of predicting that they don’t have diabetes can be much worse than the other way round.\nLet us find the optimal depth of the tree and the number of terminal nods (leaves) that minimizes the FNR or maximizes recall.\nFind the maximum values of depth and number of leaves.\n\n#Defining the object to build a regression tree\nmodel = DecisionTreeClassifier(random_state=1) \n\n#Fitting the regression tree to the data\nmodel.fit(X, y)\n\nDecisionTreeClassifier(random_state=1)\n\n\n\n# Maximum number of leaves\nmodel.get_n_leaves()\n\n118\n\n\n\n# Maximum depth\nmodel.get_depth()\n\n14\n\n\n\n#Defining parameters and the range of values over which to optimize\nparam_grid = {    \n    'max_depth': range(2,14),\n    'max_leaf_nodes': range(2,118),\n    'max_features': range(1, 9)\n}\n\n\n#Grid search to optimize parameter values\n\nstart_time = time.time()\nskf = StratifiedKFold(n_splits=5)#The folds are made by preserving the percentage of samples for each class.\n\n#Minimizing FNR is equivalent to maximizing recall\ngrid_search = GridSearchCV(DecisionTreeClassifier(random_state=1), param_grid, scoring=['precision','recall'], \n                           refit=\"recall\", cv=skf, n_jobs=-1, verbose = True)\ngrid_search.fit(X, y)\n\n# make the predictions\ny_pred = grid_search.predict(Xtest)\n\nprint('Train accuracy : %.3f'%grid_search.best_estimator_.score(X, y))\nprint('Test accuracy : %.3f'%grid_search.best_estimator_.score(Xtest, ytest))\nprint('Best recall Through Grid Search : %.3f'%grid_search.best_score_)\n\nprint('Best params for recall')\nprint(grid_search.best_params_)\n\nprint(\"Time taken =\", round((time.time() - start_time)), \"seconds\")\n\nFitting 5 folds for each of 11136 candidates, totalling 55680 fits\nTrain accuracy : 0.785\nTest accuracy : 0.675\nBest recall Through Grid Search : 0.658\nBest params for recall\n{'max_depth': 4, 'max_features': 2, 'max_leaf_nodes': 8}\nTime taken = 70 seconds",
    "crumbs": [
      "Tree based models",
      "<span class='chapter-number'>5</span>  <span class='chapter-title'>Classification trees</span>"
    ]
  },
  {
    "objectID": "Lec4_ClassificationTree.html#optimizing-the-decision-threshold-probability",
    "href": "Lec4_ClassificationTree.html#optimizing-the-decision-threshold-probability",
    "title": "5  Classification trees",
    "section": "5.3 Optimizing the decision threshold probability",
    "text": "5.3 Optimizing the decision threshold probability\nNote that decision threshold probability is not tuned with GridSearchCV because GridSearchCV is a technique used for hyperparameter tuning in machine learning models, and the decision threshold probability is not a hyperparameter of the model.\nThe decision threshold is set to 0.5 by default during hyperparameter tuning with GridSearchCV.\nGridSearchCV is used to tune hyperparameters that control the internal settings of a machine learning model, such as learning rate, regularization strength, and maximum tree depth, among others. These hyperparameters affect the model’s internal behavior and performance. On the other hand, the decision threshold is an external parameter that is used to interpret the model’s output and make predictions based on the predicted probabilities.\nTo tune the decision threshold, one typically needs to manually adjust it after the model has been trained and evaluated using a specific set of hyperparameter values. This can be done using methods, which involve evaluating the model’s performance at different decision threshold values and selecting the one that best meets the desired trade-off between false positives and false negatives based on the specific problem requirements.\nAs the recall will always be 100% for a decision threshold probability of zero, we’ll find a decision threshold probability that balances recall with another performance metric such as precision, false positive rate, accuracy, etc. Below are a couple of examples that show we can balance recall with (1) precision or (2) false positive rate.\n\n5.3.1 Balancing recall with precision\nWe can find a threshold probability that balances recall with precision.\n\nmodel = DecisionTreeClassifier(random_state=1, max_depth = 4, max_leaf_nodes=8, max_features=2).fit(X, y)\n\n# Note that we are using the cross-validated predicted probabilities, instead of directly using the \n# predicted probabilities on train data, as the model may be overfitting on the train data, and \n# may lead to misleading results\ncross_val_ypred = cross_val_predict(DecisionTreeClassifier(random_state=1, max_depth = 4, \n                                                        max_leaf_nodes=8, max_features=2), X, \n                                              y, cv = 5, method = 'predict_proba')\n\np, r, thresholds = precision_recall_curve(y, cross_val_ypred[:,1])\ndef plot_precision_recall_vs_threshold(precisions, recalls, thresholds):\n    plt.figure(figsize=(8, 8))\n    plt.title(\"Precision and Recall Scores as a function of the decision threshold\")\n    plt.plot(thresholds, precisions[:-1], \"b--\", label=\"Precision\")\n    plt.plot(thresholds, recalls[:-1], \"g-\", label=\"Recall\")\n    plt.plot(thresholds, precisions[:-1], \"o\", color = 'blue')\n    plt.plot(thresholds, recalls[:-1], \"o\", color = 'green')\n    plt.ylabel(\"Score\")\n    plt.xlabel(\"Decision Threshold\")\n    plt.legend(loc='best')\n    plt.legend()\nplot_precision_recall_vs_threshold(p, r, thresholds)\n\n\n\n\n\n\n\n\n\n# Thresholds with precision and recall\nnp.concatenate([thresholds.reshape(-1,1), p[:-1].reshape(-1,1), r[:-1].reshape(-1,1)], axis = 1)\n\narray([[0.08196721, 0.33713355, 1.        ],\n       [0.09045226, 0.34982332, 0.95652174],\n       [0.09248555, 0.36641221, 0.92753623],\n       [0.0964467 , 0.39293139, 0.91304348],\n       [0.1       , 0.42105263, 0.88888889],\n       [0.10810811, 0.42298851, 0.88888889],\n       [0.10869565, 0.42857143, 0.88405797],\n       [0.12820513, 0.48378378, 0.8647343 ],\n       [0.14285714, 0.48219178, 0.85024155],\n       [0.18518519, 0.48618785, 0.85024155],\n       [0.2       , 0.48611111, 0.84541063],\n       [0.20512821, 0.48876404, 0.84057971],\n       [0.20833333, 0.49418605, 0.82125604],\n       [0.21276596, 0.49411765, 0.8115942 ],\n       [0.22916667, 0.50151976, 0.79710145],\n       [0.23684211, 0.51582278, 0.78743961],\n       [0.27777778, 0.52786885, 0.77777778],\n       [0.3015873 , 0.54794521, 0.77294686],\n       [0.36      , 0.56554307, 0.7294686 ],\n       [0.3697479 , 0.56692913, 0.69565217],\n       [0.37931034, 0.58974359, 0.66666667],\n       [0.54954955, 0.59130435, 0.65700483],\n       [0.55172414, 0.59798995, 0.57487923],\n       [0.55882353, 0.59893048, 0.5410628 ],\n       [0.58823529, 0.6091954 , 0.51207729],\n       [0.61904762, 0.6       , 0.47826087],\n       [0.62337662, 0.60431655, 0.4057971 ],\n       [0.63461538, 0.59130435, 0.32850242],\n       [0.69354839, 0.59803922, 0.29468599],\n       [0.69642857, 0.59493671, 0.22705314],\n       [0.70149254, 0.56338028, 0.19323671],\n       [0.71153846, 0.61403509, 0.16908213],\n       [0.75609756, 0.5952381 , 0.12077295],\n       [0.76363636, 0.55555556, 0.09661836],\n       [0.76470588, 0.59090909, 0.06280193],\n       [0.875     , 0.66666667, 0.03864734],\n       [0.94117647, 0.66666667, 0.02898551],\n       [1.        , 0.6       , 0.01449275]])\n\n\nSuppose, we wish to have at least 80% recall, with the highest possible precision. Then, based on the precision-recall curve (or the table above), we should have a decision threshold probability of 0.21.\nLet’s assess the model’s performance on test data with a threshold probability of 0.21.\n\n# Performance metrics computation for the optimum decision threshold probability\ndesired_threshold = 0.21\n\ny_pred_prob = model.predict_proba(Xtest)[:,1] \n\n# Classifying observations in the positive class (y = 1) if the predicted probability is greater\n# than the desired decision threshold probability\ny_pred = y_pred_prob &gt; desired_threshold\ny_pred = y_pred.astype(int)\n\n#Computing the accuracy\nprint(\"Accuracy: \",accuracy_score(y_pred, ytest)*100)  \n\n#Computing the ROC-AUC\nfpr, tpr, auc_thresholds = roc_curve(ytest, y_pred_prob)\nprint(\"ROC-AUC: \",auc(fpr, tpr))# AUC of ROC\n\n#Computing the precision and recall\nprint(\"Precision: \", precision_score(ytest, y_pred))\nprint(\"Recall: \", recall_score(ytest, y_pred))\n\n#Confusion matrix\ncm = pd.DataFrame(confusion_matrix(ytest, y_pred), \n                  columns=['Predicted 0', 'Predicted 1'], index = ['Actual 0', 'Actual 1'])\nsns.heatmap(cm, annot=True, cmap='Blues', fmt='g');\n\nAccuracy:  72.72727272727273\nROC-AUC:  0.7544509078089194\nPrecision:  0.611764705882353\nRecall:  0.8524590163934426\n\n\n\n\n\n\n\n\n\n\n\n5.3.2 Balancing recall with false positive rate\nSuppose we wish to balance recall with false positive rate. We can optimize the model to maximize ROC-AUC, and then choose a point on the ROC-curve that balances recall with the false positive rate.\n\n# Defining parameters and the range of values over which to optimize\nparam_grid = {    \n    'max_depth': range(2,14),\n    'max_leaf_nodes': range(2,118),\n    'max_features': range(1, 9)\n}\n\n\n#Grid search to optimize parameter values\n\nstart_time = time.time()\nskf = StratifiedKFold(n_splits=5)#The folds are made by preserving the percentage of samples for each class.\n\n#Minimizing FNR is equivalent to maximizing recall\ngrid_search = GridSearchCV(DecisionTreeClassifier(random_state=1), param_grid, scoring=['precision','recall',\n                            'roc_auc'], refit=\"roc_auc\", cv=skf, n_jobs=-1, verbose = True)\ngrid_search.fit(X, y)\n\n# make the predictions\ny_pred = grid_search.predict(Xtest)\n\nprint('Best params for recall')\nprint(grid_search.best_params_)\n\nprint(\"Time taken =\", round((time.time() - start_time)), \"seconds\")\n\nFitting 5 folds for each of 11136 candidates, totalling 55680 fits\nBest params for recall\n{'max_depth': 6, 'max_features': 2, 'max_leaf_nodes': 9}\nTime taken = 72 seconds\n\n\n\nmodel = DecisionTreeClassifier(random_state=1, max_depth = 6, max_leaf_nodes=9, max_features=2).fit(X, y)\n\n\ncross_val_ypred = cross_val_predict(DecisionTreeClassifier(random_state=1, max_depth = 6, \n                                                           max_leaf_nodes=9, max_features=2), X, \n                                              y, cv = 5, method = 'predict_proba')\n\nfpr, tpr, auc_thresholds = roc_curve(y, cross_val_ypred[:,1])\nprint(auc(fpr, tpr))# AUC of ROC\ndef plot_roc_curve(fpr, tpr, label=None):\n    plt.figure(figsize=(8,8))\n    plt.title('ROC Curve')\n    plt.plot(fpr, tpr, linewidth=2, label=label)\n    plt.plot(fpr, tpr, 'o', color = 'blue')\n    plt.plot([0, 1], [0, 1], 'k--')\n    plt.axis([-0.005, 1, 0, 1.005])\n    plt.xticks(np.arange(0,1, 0.05), rotation=90)\n    plt.xlabel(\"False Positive Rate\")\n    plt.ylabel(\"True Positive Rate (Recall)\")\n\nfpr, tpr, auc_thresholds = roc_curve(y, cross_val_ypred[:,1])\nplot_roc_curve(fpr, tpr)\n\n0.7605075431162388\n\n\n\n\n\n\n\n\n\n\n# Thresholds with TPR and FPR\nall_thresholds = np.concatenate([auc_thresholds.reshape(-1,1), tpr.reshape(-1,1), fpr.reshape(-1,1)], axis = 1)\nrecall_more_than_80 = all_thresholds[all_thresholds[:,1]&gt;0.8,:]\n# As the values in 'recall_more_than_80' are arranged in increasing order of recall and decreasing threshold,\n# the first value will provide the maximum threshold probability for the recall to be more than 80%\n# We wish to find the maximum threshold probability to obtain the minimum possible FPR\nrecall_more_than_80[0]\n\narray([0.21276596, 0.80676329, 0.39066339])\n\n\nSuppose, we wish to have at least 80% recall, with the lowest possible precision. Then, based on the ROC-AUC curve, we should have a decision threshold probability of 0.21.\nLet’s assess the model’s performance on test data with a threshold probability of 0.21.\n\n# Performance metrics computation for the optimum decision threshold probability\ndesired_threshold = 0.21\n\ny_pred_prob = model.predict_proba(Xtest)[:,1] \n\n# Classifying observations in the positive class (y = 1) if the predicted probability is greater\n# than the desired decision threshold probability\ny_pred = y_pred_prob &gt; desired_threshold\ny_pred = y_pred.astype(int)\n\n#Computing the accuracy\nprint(\"Accuracy: \",accuracy_score(y_pred, ytest)*100)  \n\n#Computing the ROC-AUC\nfpr, tpr, auc_thresholds = roc_curve(ytest, y_pred_prob)\nprint(\"ROC-AUC: \",auc(fpr, tpr))# AUC of ROC\n\n#Computing the precision and recall\nprint(\"Precision: \", precision_score(ytest, y_pred))\nprint(\"Recall: \", recall_score(ytest, y_pred))\n\n#Confusion matrix\ncm = pd.DataFrame(confusion_matrix(ytest, y_pred), \n                  columns=['Predicted 0', 'Predicted 1'], index = ['Actual 0', 'Actual 1'])\nsns.heatmap(cm, annot=True, cmap='Blues', fmt='g');\n\nAccuracy:  71.42857142857143\nROC-AUC:  0.7618543980257358\nPrecision:  0.6075949367088608\nRecall:  0.7868852459016393",
    "crumbs": [
      "Tree based models",
      "<span class='chapter-number'>5</span>  <span class='chapter-title'>Classification trees</span>"
    ]
  },
  {
    "objectID": "Lec4_ClassificationTree.html#cost-complexity-pruning",
    "href": "Lec4_ClassificationTree.html#cost-complexity-pruning",
    "title": "5  Classification trees",
    "section": "5.4 Cost complexity pruning",
    "text": "5.4 Cost complexity pruning\nJust as we did cost complexity pruning in a regression tree, we can do it to optimize the model for a classification tree.\n\nmodel = DecisionTreeClassifier(random_state = 1)#model without any restrictions\npath= model.cost_complexity_pruning_path(X,y)# Compute the pruning path during Minimal Cost-Complexity Pruning.\n\n\nalphas=path['ccp_alphas']\nlen(alphas)\n\n58\n\n\n\n#Grid search to optimize parameter values\n\nskf = StratifiedKFold(n_splits=5)\ngrid_search = GridSearchCV(DecisionTreeClassifier(random_state = 1), param_grid = {'ccp_alpha':alphas}, \n                                                  scoring=['precision','recall','accuracy'], \n                                                  refit=\"recall\", cv=skf, n_jobs=-1, verbose = True)\ngrid_search.fit(X, y)\n\n# make the predictions\ny_pred = grid_search.predict(Xtest)\n\nprint('Best params for recall')\nprint(grid_search.best_params_)\n\nFitting 5 folds for each of 58 candidates, totalling 290 fits\nBest params for recall\n{'ccp_alpha': 0.010561291712538737}\n\n\n\n# Model with the optimal value of 'ccp_alpha'\nmodel = DecisionTreeClassifier(ccp_alpha=0.01435396,random_state=1)\nmodel.fit(X, y)\n\nDecisionTreeClassifier(ccp_alpha=0.01435396, random_state=1)\n\n\nNow we can tune the decision threshold probability to balance recall with another performance metrics as shown earlier in Section 4.3.",
    "crumbs": [
      "Tree based models",
      "<span class='chapter-number'>5</span>  <span class='chapter-title'>Classification trees</span>"
    ]
  },
  {
    "objectID": "Assignment1.html",
    "href": "Assignment1.html",
    "title": "Assignment 1",
    "section": "",
    "text": "Instructions",
    "crumbs": [
      "Assignments",
      "<span class='chapter-number'>6</span>  <span class='chapter-title'>Assignment 1</span>"
    ]
  },
  {
    "objectID": "Assignment1.html#instructions",
    "href": "Assignment1.html#instructions",
    "title": "Assignment 1",
    "section": "",
    "text": "You may talk to a friend, discuss the questions and potential directions for solving them. However, you need to write your own solutions and code separately, and not as a group activity.\nWrite your code in the Code cells and your answers in the Markdown cells of the Jupyter notebook. Ensure that the solution is written neatly enough to for the graders to understand and follow.\nUse Quarto to render the .ipynb file as HTML. You will need to open the command prompt, navigate to the directory containing the file, and use the command: quarto render filename.ipynb --to html. Submit the HTML file.\nThe assignment is worth 100 points, and is due on Thursday, 11th April 2024 at 11:59 pm.\nFive points are properly formatting the assignment. The breakdown is as follows:\n\nMust be an HTML file rendered using Quarto (1 point). If you have a Quarto issue, you must mention the issue & quote the error you get when rendering using Quarto in the comments section of Canvas, and submit the ipynb file.\nNo name can be written on the assignment, nor can there be any indicator of the student’s identity—e.g. printouts of the working directory should not be included in the final submission. (1 point)\nThere aren’t excessively long outputs of extraneous information (e.g. no printouts of entire data frames without good reason, there aren’t long printouts of which iteration a loop is on, there aren’t long sections of commented-out code, etc.) (1 point)\nFinal answers to each question are written in the Markdown cells. (1 point)\nThere is no piece of unnecessary / redundant code, and no unnecessary / redundant text. (1 point)",
    "crumbs": [
      "Assignments",
      "<span class='chapter-number'>6</span>  <span class='chapter-title'>Assignment 1</span>"
    ]
  },
  {
    "objectID": "Assignment1.html#bias-variance-trade-off-for-regression-32-points",
    "href": "Assignment1.html#bias-variance-trade-off-for-regression-32-points",
    "title": "Assignment 1",
    "section": "1) Bias-Variance Trade-off for Regression (32 points)",
    "text": "1) Bias-Variance Trade-off for Regression (32 points)\nThe main goal of this question is to understand and visualize the bias-variance trade-off in a regression model by performing repetitive simulations.\nThe conceptual clarity about bias and variance will help with the main logic behind creating many models that will come up later in the course.\n\na)\nFirst, you need to implement the underlying function of the population you want to sample data from. Assume that the function is the Bukin function. Implement it as a user-defined function and run it with the test cases below to make sure it is implemented correctly. (3 points)\nNote: It would be more useful to have only one input to the function. You can treat the input as an array of two elements.\n\n\nCode\nprint(Bukin(np.array([1,2]))) # The output should be 141.177\nprint(Bukin(np.array([6,-4]))) # The output should be 208.966\nprint(Bukin(np.array([0,1]))) # The output should be 100.1\n\n\n\n\nb)\nUsing the following assumptions, sample a test dataset with 100 observations from the underlying function. Remember how the test dataset is supposed to be sampled for bias-variance calculations. No loops are allowed for this question - .apply should be very useful and actually simpler to use. (4 points)\nAssumptions:\n\nThe first predictor, \\(x_1\\), comes from a uniform distribution between -15 and 5. (\\(U[-15, -5]\\))\nThe second predictor, \\(x_2\\), comes from a uniform distribution between -3 and 3. (\\(U[-3, 3]\\))\nUse np.random.seed(100) for reproducibility.\n\n\n\nc)\nCreate an empty DataFrame with columns named degree, bias_sq and var. This will be useful to store the analysis results in this question. (1 point)\n\n\nd)\nSample 100 training datasets to calculate the bias and the variance of a Linear Regression model that predicts data coming from the underlying Bukin function. You need to repeat this process with polynomial transformations from degree 1 (which is the original predictors) to degree 7. For each degree, store the degree, bias-squared and variance values in the DataFrame. (15 points)\nNote:\n\nFor a linear regression model, bias refers to squared bias\nAssume that the noise in the population is a zero-mean Gaussian with a standard deviation of 10. (\\(N(0,10)\\))\nKeep the training data size the same as the test data size.\nYou need both the interactions and the higher-order transformations in your polynomial predictors.\nFor \\(i^{th}\\) training dataset, you can consider using np.random.seed(i) for reproducibility.\n\n\n\ne)\nUsing the results stored in the DataFrame, plot the (1) expected mean squared error, (2) expected squared bias, (3) expected variance, and (4) the expected sum of squared bias, variance and noise variance (i.e., summation of 2, 3, and noise variance), against the degree of the predictors in the model. (5 points)\nMake sure you add a legend to label the three lineplots. (1 point)\n\n\nf)\nWhat is the degree of the optimal model? (1 point) What are the squared bias, variance and mean squared error for that degree? (2 points)",
    "crumbs": [
      "Assignments",
      "<span class='chapter-number'>6</span>  <span class='chapter-title'>Assignment 1</span>"
    ]
  },
  {
    "objectID": "Assignment1.html#low-bias-low-variance-model-via-regularization-25-points",
    "href": "Assignment1.html#low-bias-low-variance-model-via-regularization-25-points",
    "title": "Assignment 1",
    "section": "2) Low-Bias-Low-Variance Model via Regularization (25 points)",
    "text": "2) Low-Bias-Low-Variance Model via Regularization (25 points)\nThe main goal of this question is to further reduce the total error by regularization - in other words, to implement the low-bias-low-variance model for the underlying function and the data coming from it.\n\na)\nFirst of all, explain why it is not guaranteed for the optimal model (with the optimal degree) in Question 1 to be the low-bias-low-variance model. (2 points) Why would regularization be necessary to achieve that model? (2 points)\n\n\nb)\nBefore repeating the process in Question 1, you should see from the figure in 1e and the results in 1f that there is no point in trying some degrees again with regularization. Find out these degrees and explain why you should not use them for this question, considering how regularization affects the bias and the variance of a model. (3 points)\n\n\nc)\nRepeat 1c and 1d with Ridge regularization. Exclude the degrees you found in 2b and also degree 7. Use Leave-One-Out (LOO) cross-validation (CV) to tune the model hyperparameter and use neg_root_mean_squared_error as the scoring metric. (7 points)\nConsider hyperparamter values in the range [1, 100].\n\n\nd)\nRepeat part 1e with Ridge regularization, using the results from 2c. (2 points)\n\n\ne)\nWhat is the degree of the optimal Ridge Regression model? (1 point) What are the bias-squared, variance and total error values for that degree? (1 point) How do they compare to the Linear Regression model results? (2 points)\n\n\nf)\nIs the regularization successful in reducing the total error of the regression model? (2 points) Explain the results in 2e in terms of how bias and variance change with regularization. (3 points)",
    "crumbs": [
      "Assignments",
      "<span class='chapter-number'>6</span>  <span class='chapter-title'>Assignment 1</span>"
    ]
  },
  {
    "objectID": "Assignment1.html#bias-variance-trade-off-for-classification-38-points",
    "href": "Assignment1.html#bias-variance-trade-off-for-classification-38-points",
    "title": "Assignment 1",
    "section": "3) Bias-Variance Trade-off for Classification (38 points)",
    "text": "3) Bias-Variance Trade-off for Classification (38 points)\nNow, it is time to understand and visualize the bias-variance trade-off in a classification model. As we covered in class, the error calculations for classification are different than regression, so it is necessary to understand the bias-variance analysis for classification as well.\nFirst of all, you need to visualize the underlying boundary between the classes in the population. Run the given code that implements the following:\n\n2000 test observations are sampled from a population with two predictors.\nEach predictor is uniformly distributed between -15 and 15. (\\(U[-15, 15]\\))\nThe underlying boundary between the classes is a circle with radius 10.\nThe noise in the population is a 30% chance that the observation is misclassified.\n\n\n\nCode\n# Number of observations\nn = 2000\n\nnp.random.seed(111)\n\n# Test predictors\nx1 = np.random.uniform(-15, 15, n)\nx2 = np.random.uniform(-15, 15, n)\nX_test = pd.DataFrame({'x1': x1, 'x2': x2})\n\n# Underlying boundary\nboundary = (x1**2) + (x2**2)\n\n# Test response (no noise!)\ny_test_wo_noise = (boundary &lt; 100).astype(int)\n\n# Test response with noise (for comparison)\nnoise_prob = 0.3\nnum_noisy_obs = int(noise_prob*n)\n\ny_test_w_noise = y_test_wo_noise.copy()\nnoise_indices = np.random.choice(range(len(y_test_w_noise)), num_noisy_obs, replace = False)\ny_test_w_noise[noise_indices] = 1 - y_test_wo_noise[noise_indices]\n\n\n\n\nCode\nsns.scatterplot(x = x1, y = x2, hue=y_test_wo_noise)\nplt.title('Sample without the noise')\nplt.show()\n\n\n\n\n\n\n\n\n\nCode\nsns.scatterplot(x = x1, y = x2, hue=y_test_w_noise)\nplt.title('Sample with the noise')\nplt.show()\n\n\n\n\n\n\n\n\na)\nCreate an empty DataFrame with columns named K, bias, var and noise. This will be useful to store the analysis results in this question. (1 point)\n\n\nb)\nSample 100 training datasets to calculate the bias and the variance of a K-Nearest Neighbors (KNN) Classifier that predicts data coming from the population with the circular underlying boundary. You need to repeat this process with a K value from 10 to 150, with a stepsize of 10. For each K, store the following values in the DataFrame:\n\nK,\nbias,\nvariance,\nexpected loss computed directly using the true response and predictions,\nexpected loss computed as (expected Bias) + (\\(c_2\\) expected variance) + (\\(c_1\\) expected noise)\n\n(20 points)\nNote:\n\nKeep the training data size the same as the test data size.\nThe given code should help you both with sampling the training data and adding noise to the training responses.\nFor \\(i^{th}\\) training dataset, you can consider using np.random.seed(i) for reproducibility.\nTo check the progress of the code while running, a simple but efficient method is to add a print(K) line in the loop.\n\n\n\nc)\nUsing the results stored in the DataFrame, plot the bias and the variance against the K value on one figure, and the expected loss (computed directly) & expected loss computed as (expected Bias) + (\\(c_2\\)expected variance) + (\\(c_1\\)expected noise) against the K value on a separate figure. (5 points) Make sure you add a legend to label the lineplots in the first figure. (1 point)\n\n\nd)\nWhat is the K of the optimal model? (1 point) What are the bias, variance and expected loss (computed either way) for that K? (2 points)\n\n\ne)\nIn part c, you should see the variance leveling off after a certain K value. Explain why this is the case, considering the effect of the K value on a KNN model. (2 points)\nThe level of complexity of the KNN model decreases as K increases. After a certain K value, the model cannot get any simpler, as it becomes the equivalent of an intercept-only model, which just returns the majority class in the dataset for a classification task. Since the level of complexity is constant and the noise is constant, the variance of the model change negligibly (due to the randomness of training datasets) but mostly levels off.\n\n\nf)\nLastly, visualize the decision boundary of a KNN Classifier with high-bias-low-variance (option 1) and low-bias-high-variance (option 2), using data from the same population.\n\nFor each option, pick a K value (1 and 90 would be good numbers.) You are expected to know which number belongs to which option.\nSample a training dataset. (Use np.random.seed(1).)\nUsing the training dataset, train a KNN model with the K value you picked.\nThe rest of the code is given below for you.\n\nNote that you need to produce two figures. (2x2 = 4 points) Put titles on the figures to describe which figure is which option. (2 points)\n\n\nCode\n# Develop and save the model as the 'model' object before using the code\nxx, yy = np.meshgrid(np.linspace(-15, 15, 100), np.linspace(-15, 15, 100))\nZ = model.predict(np.c_[xx.ravel(), yy.ravel()])\nZ = Z.reshape(xx.shape)\nsns.scatterplot(x = x1, y = x2, hue=y_train, legend=False);\nplt.contour(xx, yy, Z, levels=[0.5], linewidths=2)\n\nplt.title('____-bias-____-variance Model')",
    "crumbs": [
      "Assignments",
      "<span class='chapter-number'>6</span>  <span class='chapter-title'>Assignment 1</span>"
    ]
  },
  {
    "objectID": "Stratified splitting.html",
    "href": "Stratified splitting.html",
    "title": "Appendix A — Stratified splitting (classification problem)",
    "section": "",
    "text": "A.1 Stratified splitting with respect to response\nQ: When splitting data into train and test for developing and assessing a classification model, it is recommended to stratify the split with respect to the response. Why?\nA: The main advantage of stratified splitting is that it can help ensure that the training and testing sets have similar distributions of the target variable, which can lead to more accurate and reliable model performance estimates.\nIn many real-world datasets, the target variable may be imbalanced, meaning that one class is more prevalent than the other(s). For example, in a medical dataset, the majority of patients may not have a particular disease, while only a small fraction may have the disease. If a random split is used to divide the dataset into training and testing sets, there is a risk that the testing set may not have enough samples from the minority class, which can lead to biased model performance estimates.\nStratified splitting addresses this issue by ensuring that both the training and testing sets have similar proportions of the target variable. This can lead to more accurate model performance estimates, especially for imbalanced datasets, by ensuring that the testing set contains enough samples from each class to make reliable predictions.\nAnother advantage of stratified splitting is that it can help ensure that the model is not overfitting to a particular class. If a random split is used and one class is overrepresented in the training set, the model may learn to predict that class well but perform poorly on the other class(es). Stratified splitting can help ensure that the model is exposed to a representative sample of all classes during training, which can improve its generalization performance on new, unseen data.\nIn summary, the advantages of stratified splitting are that it can lead to more accurate and reliable model performance estimates, especially for imbalanced datasets, and can help prevent overfitting to a particular class.",
    "crumbs": [
      "Appendices",
      "<span class='chapter-number'>A</span>  <span class='chapter-title'>Stratified splitting (classification problem)</span>"
    ]
  },
  {
    "objectID": "Stratified splitting.html#stratified-splitting-with-respect-to-response-and-categorical-predictors",
    "href": "Stratified splitting.html#stratified-splitting-with-respect-to-response-and-categorical-predictors",
    "title": "Appendix A — Stratified splitting (classification problem)",
    "section": "A.2 Stratified splitting with respect to response and categorical predictors",
    "text": "A.2 Stratified splitting with respect to response and categorical predictors\nQ: Will it be better to stratify the split with respect to the response as well as categorical predictors, instead of only the response? In that case, the train and test datasets will be even more representative of the complete data.\nA: It is not recommended to stratify with respect to both the response and categorical predictors simultaneously, while splitting a dataset into train and test, because doing so may result in the test data being very similar to train data, thereby defeating the purpose of assessing the model on unseen data. This kind of a stratified splitting will tend to make the relationships between the response and predictors in train data also appear in test data, which will result in the performance on test data being very similar to that in train data. Thus, in this case, the ability of the model to generalize to new, unseen data won’t be assessed by test data.\nTherefore, it is generally recommended to only stratify the response variable when splitting the data for model training, and to use random sampling for the predictor variables. This helps to ensure that the model is able to capture the underlying relationships between the predictor variables and the response variable, while still being able to generalize well to new, unseen data.\nIn the extreme scenario, when there are no continuous predictors, and there are enough observations for stratification with respect to the response and the categorical predictors, the train and test datasets may turn out to be exactly the same. Example 1 below illustrates this scenario.",
    "crumbs": [
      "Appendices",
      "<span class='chapter-number'>A</span>  <span class='chapter-title'>Stratified splitting (classification problem)</span>"
    ]
  },
  {
    "objectID": "Stratified splitting.html#example-1",
    "href": "Stratified splitting.html#example-1",
    "title": "Appendix A — Stratified splitting (classification problem)",
    "section": "A.3 Example 1",
    "text": "A.3 Example 1\nThe example below shows that the train and test data can be exactly the same if we stratify the split with respect to response and the categorical predictors.\n\n# Importing necessary libraries\nimport pandas as pd\nimport numpy as np\nimport matplotlib.pyplot as plt\nimport seaborn as sns\nfrom sklearn.linear_model import LogisticRegression\nfrom sklearn.model_selection import train_test_split, cross_val_predict, cross_val_score\nfrom sklearn.metrics import accuracy_score\nfrom itertools import product\nsns.set(font_scale=1.35)\n\nLet us simulate a dataset with 8 observations, two categorical predictors x1 and x2 and the the binary response y.\n\n#Setting a seed for reproducible results\nnp.random.seed(9)\n\n# 8 observations\nn = 8\n\n#Simulating the categorical predictors\nx1 = pd.Series(np.random.randint(0,2,n), name = 'x1')\nx2 = pd.Series(np.random.randint(0,2,n), name = 'x2')\n\n#Simulating the response\npr = (x1==1)*0.7+(x2==0)*0.3# + (x3*0.1&gt;0.1)*0.1\ny = pd.Series(1*(np.random.uniform(size = n) &lt; pr), name = 'y')\n\n#Defining the predictor object 'X'\nX = pd.concat([x1, x2], axis = 1)\n\n#Stratified splitting with respect to the response and predictors to create 50% train and test datasets\nX_train_stratified, X_test_stratified, y_train_stratified,\\\ny_test_stratified = train_test_split(X, y, test_size = 0.5, random_state = 45, stratify=data[['x1', 'x2', 'y']])\n\n#Train and test data resulting from the above stratified splitting\ndata_train = pd.concat([X_train_stratified, y_train_stratified], axis = 1)\ndata_test = pd.concat([X_test_stratified, y_test_stratified], axis = 1)\n\nLet us check the train and test datasets created with stratified splitting with respect to both the predictors and the response.\n\ndata_train\n\n\n\n\n\n\n\n\n\nx1\nx2\ny\n\n\n\n\n2\n0\n0\n1\n\n\n7\n0\n1\n0\n\n\n3\n1\n0\n1\n\n\n1\n0\n1\n0\n\n\n\n\n\n\n\n\n\ndata_test\n\n\n\n\n\n\n\n\n\nx1\nx2\ny\n\n\n\n\n4\n0\n1\n0\n\n\n6\n1\n0\n1\n\n\n0\n0\n1\n0\n\n\n5\n0\n0\n1\n\n\n\n\n\n\n\n\nNote that the train and test datasets are exactly the same! Stratified splitting tends to have the same proportion of observations corresponding to each strata in both the train and test datasets, where each strata is a unique combination of values of x1, x2, and y. This will tend to make the train and test datasets quite similar!",
    "crumbs": [
      "Appendices",
      "<span class='chapter-number'>A</span>  <span class='chapter-title'>Stratified splitting (classification problem)</span>"
    ]
  },
  {
    "objectID": "Stratified splitting.html#example-2-simulation-results",
    "href": "Stratified splitting.html#example-2-simulation-results",
    "title": "Appendix A — Stratified splitting (classification problem)",
    "section": "A.4 Example 2: Simulation results",
    "text": "A.4 Example 2: Simulation results\nThe example below shows that train and test set performance will tend to be quite similar if we stratify the datasets with respect to the predictors and the response.\nWe’ll simulate a dataset consisting of 1000 observations, 2 categorical predictors x1 and x2, a continuous predictor x3, and a binary response y.\n\n#Setting a seed for reproducible results\nnp.random.seed(99)\n\n# 1000 Observations\nn = 1000\n\n#Simulating categorical predictors x1 and x2\nx1 = pd.Series(np.random.randint(0,2,n), name = 'x1')\nx2 = pd.Series(np.random.randint(0,2,n), name = 'x2')\n\n#Simulating continuous predictor x3\nx3 = pd.Series(np.random.normal(0,1,n), name = 'x3')\n\n#Simulating the response\npr = (x1==1)*0.7+(x2==0)*0.3 + (x3*0.1&gt;0.1)*0.1\ny = pd.Series(1*(np.random.uniform(size = n) &lt; pr), name = 'y')\n\n#Defining the predictor object 'X'\nX = pd.concat([x1, x2, x3], axis = 1)\n\nWe’ll comparing model performance metrics when the data is split into train and test by performing stratified splitting\n\nOnly with respect to the response\nWith respect to the response and categorical predictors\n\nWe’ll perform 1000 simulations, where the data is split using a different seed in each simulation.\n\n#Creating an empty dataframe to store simulation results of 1000 simulations\naccuracy_iter = pd.DataFrame(columns = {'train_y_stratified','test_y_stratified',\n                                        'train_y_CatPredictors_stratified','test_y_CatPredictors_stratified'})\n\n\n# Comparing model performance metrics when the data is split into train and test by performing stratified splitting\n# (1) only with respect to the response\n# (2) with respect to the response and categorical predictors\n\n# Stratified splitting is performed 1000 times and the results are compared\nfor i in np.arange(1,1000):\n \n    #--------Case 1-------------------#\n    # Stratified splitting with respect to response only to create train and test data\n    X_train, X_test, y_train, y_test = train_test_split(X, y, test_size = 0.2, random_state = i, stratify=y)\n    model = LogisticRegression()\n    model.fit(X_train, y_train)\n    \n    # Model accuracy on train and test data, with stratification only on response while splitting \n    # the complete data into train and test\n    accuracy_iter.loc[(i-1), 'train_y_stratified'] = model.score(X_train, y_train)\n    accuracy_iter.loc[(i-1), 'test_y_stratified'] = model.score(X_test, y_test)\n        \n    #--------Case 2-------------------#\n    # Stratified splitting with respect to response and categorical predictors to create train \n    # and test data\n    X_train, X_test, y_train, y_test = train_test_split(X, y, test_size = 0.2, random_state = i, \n                                                        stratify=pd.concat([x1, x2, y], axis = 1))\n    model.fit(X_train, y_train)\n\n    # Model accuracy on train and test data, with stratification on response and predictors while \n    # splitting the complete data into train and test\n    accuracy_iter.loc[(i-1), 'train_y_CatPredictors_stratified'] = model.score(X_train, y_train)\n    accuracy_iter.loc[(i-1), 'test_y_CatPredictors_stratified'] = model.score(X_test, y_test)\n    \n# Converting accuracy to numeric\naccuracy_iter = accuracy_iter.apply(lambda x:x.astype(float), axis = 1)\n\n\nDistribution of train and test accuracies\nThe table below shows the distribution of train and test accuracies when the data is split into train and test by performing stratified splitting:\n\nOnly with respect to the response (see train_y_stratified and test_y_stratified)\nWith respect to the response and categorical predictors (see train_y_CatPredictors_stratified and test_y_CatPredictors_stratified)\n\n\naccuracy_iter.describe()\n\n\n\n\n\n\n\n\n\ntrain_y_stratified\ntest_y_stratified\ntrain_y_CatPredictors_stratified\ntest_y_CatPredictors_stratified\n\n\n\n\ncount\n999.000000\n999.000000\n9.990000e+02\n9.990000e+02\n\n\nmean\n0.834962\n0.835150\n8.350000e-01\n8.350000e-01\n\n\nstd\n0.005833\n0.023333\n8.552999e-15\n8.552999e-15\n\n\nmin\n0.812500\n0.755000\n8.350000e-01\n8.350000e-01\n\n\n25%\n0.831250\n0.820000\n8.350000e-01\n8.350000e-01\n\n\n50%\n0.835000\n0.835000\n8.350000e-01\n8.350000e-01\n\n\n75%\n0.838750\n0.850000\n8.350000e-01\n8.350000e-01\n\n\nmax\n0.855000\n0.925000\n8.350000e-01\n8.350000e-01\n\n\n\n\n\n\n\n\nLet us visualize the distribution of these accuracies.\n\n\nA.4.1 Stratified splitting only with respect to the response\n\nsns.histplot(data=accuracy_iter, x=\"train_y_stratified\", color=\"red\", label=\"Train accuracy\", kde=True)\nsns.histplot(data=accuracy_iter, x=\"test_y_stratified\", color=\"skyblue\", label=\"Test accuracy\", kde=True);\nplt.legend()\nplt.xlabel('Accuracy')\n\nText(0.5, 0, 'Accuracy')\n\n\n\n\n\n\n\n\n\nNote the variability in train and test accuracies when the data is stratified only with respect to the response. The train accuracy varies between 81.2% and 85.5%, while the test accuracy varies between 75.5% and 92.5%.\n\n\nA.4.2 Stratified splitting with respect to the response and categorical predictors\n\nsns.histplot(data=accuracy_iter, x=\"train_y_CatPredictors_stratified\", color=\"red\", label=\"Train accuracy\", kde=True)\nsns.histplot(data=accuracy_iter, x=\"test_y_CatPredictors_stratified\", color=\"skyblue\", label=\"Test accuracy\", kde=True);\nplt.legend()\nplt.xlabel('Accuracy')\n\nText(0.5, 0, 'Accuracy')\n\n\n\n\n\n\n\n\n\nThe train and test accuracies are between 85% and 85.5% for all the simulations. As a results of stratifying the splitting with respect to both the response and the categorical predictors, the train and test datasets are almost the same because the datasets are engineered to be quite similar, thereby making the test dataset inappropriate for assessing accuracy on unseen data. Thus, it is recommended to stratify the splitting only with respect to the response.",
    "crumbs": [
      "Appendices",
      "<span class='chapter-number'>A</span>  <span class='chapter-title'>Stratified splitting (classification problem)</span>"
    ]
  },
  {
    "objectID": "Datasets.html",
    "href": "Datasets.html",
    "title": "Appendix B — Datasets, assignment and project files",
    "section": "",
    "text": "Datasets used in the book, assignment files, project files, and prediction problems report tempate can be found here",
    "crumbs": [
      "Appendices",
      "<span class='chapter-number'>B</span>  <span class='chapter-title'>Datasets, assignment and project files</span>"
    ]
  }
]